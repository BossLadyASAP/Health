
import { useState } from 'react';
import { Copy, ThumbsUp, ThumbsDown, User, Bot, Volume2, VolumeX } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Message } from '@/types';
import { useLanguage } from '@/contexts/LanguageContext';

interface MessageBubbleProps {
  message: Message;
  onCopy: () => void;
}

export function MessageBubble({ message, onCopy }: MessageBubbleProps) {
  const [showActions, setShowActions] = useState(false);
  const [feedback, setFeedback] = useState<'up' | 'down' | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const { voiceLanguage } = useLanguage();

  const isUser = message.isUser;

  const handlePlayAudio = async () => {
    if (isPlaying) {
      // Stop current audio
      speechSynthesis.cancel();
      setIsPlaying(false);
      return;
    }

    try {
      setIsPlaying(true);
      const utterance = new SpeechSynthesisUtterance(message.content);
      
      // Set language based on voice language preference
      const languageMap: { [key: string]: string } = {
        'English': 'en-US',
        'French': 'fr-FR',
        'Spanish': 'es-ES',
        'German': 'de-DE',
        'Portuguese': 'pt-PT',
        'Italian': 'it-IT',
        'Dutch': 'nl-NL',
        'Russian': 'ru-RU',
        'Chinese': 'zh-CN',
        'Japanese': 'ja-JP',
        'Korean': 'ko-KR',
        'Arabic': 'ar-SA',
        'Hindi': 'hi-IN',
        'Auto-detect': 'en-US'
      };
      
      utterance.lang = languageMap[voiceLanguage] || 'en-US';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      
      utterance.onend = () => {
        setIsPlaying(false);
      };
      
      utterance.onerror = () => {
        setIsPlaying(false);
      };
      
      speechSynthesis.speak(utterance);
    } catch (error) {
      console.error('Error playing audio:', error);
      setIsPlaying(false);
    }
  };

  return (
    <div 
      className={`flex items-start gap-4 group ${isUser ? 'justify-end' : ''}`}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      {!isUser && (
        <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
          <Bot className="h-4 w-4" />
        </div>
      )}
      
      <div className={`flex-1 max-w-[70%] ${isUser ? 'order-first' : ''}`}>
        <div
          className={`rounded-lg p-4 ${
            isUser 
              ? 'bg-gray-800 text-white ml-auto' 
              : 'bg-gray-100 text-gray-800'
          }`}
        >
          <div className="whitespace-pre-wrap break-words">
            {message.content}
          </div>
          
          {message.model && !isUser && (
            <div className="mt-2 text-xs opacity-70">
              Generated by {message.model}
            </div>
          )}
        </div>

        {/* Message Actions */}
        {showActions && !isUser && (
          <div className="flex items-center gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
            <Button
              size="sm"
              variant="ghost"
              onClick={handlePlayAudio}
              className="h-7 w-7 p-0 hover:bg-gray-200"
              title="Listen to response"
            >
              {isPlaying ? <VolumeX className="h-3 w-3" /> : <Volume2 className="h-3 w-3" />}
            </Button>
            
            <Button
              size="sm"
              variant="ghost"
              onClick={onCopy}
              className="h-7 w-7 p-0 hover:bg-gray-200"
            >
              <Copy className="h-3 w-3" />
            </Button>
            
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setFeedback(feedback === 'up' ? null : 'up')}
              className={`h-7 w-7 p-0 hover:bg-gray-200 ${
                feedback === 'up' ? 'bg-green-100 text-green-600' : ''
              }`}
            >
              <ThumbsUp className="h-3 w-3" />
            </Button>
            
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setFeedback(feedback === 'down' ? null : 'down')}
              className={`h-7 w-7 p-0 hover:bg-gray-200 ${
                feedback === 'down' ? 'bg-red-100 text-red-600' : ''
              }`}
            >
              <ThumbsDown className="h-3 w-3" />
            </Button>
          </div>
        )}
        
        <div className="text-xs text-gray-500 mt-1">
          {message.timestamp.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>

      {isUser && (
        <div className="w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
          <User className="h-4 w-4" />
        </div>
      )}
    </div>
  );
}
